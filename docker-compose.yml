version: '3.8'

services:
  netmaker-server:
    image: docker.io/gravitl/netmaker:${NETMAKER_VERSION:-latest}
    container_name: netmaker-server
    hostname: netmaker-server
    restart: unless-stopped
    ports:
      # For WireGuard - essential for Netmaker functionality
      - "${WIREGUARD_PORT_START:-51821}-${WIREGUARD_PORT_END:-51830}:${WIREGUARD_PORT_START:-51821}-${WIREGUARD_PORT_END:-51830}/udp"
    environment:
      SERVER_NAME: broker.${DOMAIN}
      SERVER_API_CONN_STRING: api.${DOMAIN}:${SERVER_PORT_INTERNAL}
      MASTER_KEY: ${MASTER_KEY}
      DATABASE: sqlite
      NODE_ID: netmaker-server
      MQ_HOST: netmaker-mq # Service name for MQTT
      MQ_PORT: 1883 # Internal MQTT port
      TELEMETRY: "off"
      VERBOSITY: "3"
      SERVER_PORT_INTERNAL: ${SERVER_PORT_INTERNAL:-8081} # Used by netmaker for its API
      # Disabling GRPC_GATEWAY for now as Nginx will handle external exposure
      # GRPC_GATEWAY_PORT: ${SERVER_HTTP_PORT:-8082} 
    volumes:
      - netmaker_data:/root/data
      - netmaker_certs:/etc/netmaker
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    # For Docker, if not using host network, specific sysctls might be needed if they apply to container's own namespace
    # For Podman, these are usually applied to the pod or are less restrictive.
    # sysctls: 
    #   net.ipv4.ip_forward: 1
    #   net.ipv4.conf.all.src_valid_mark: 1
    #   net.ipv6.conf.all.disable_ipv6: 0 # If IPv6 is desired
    #   net.ipv6.conf.all.forwarding: 1   # If IPv6 is desired
    networks:
      - netmaker_network
    depends_on:
      - netmaker-mq

  netmaker-mq:
    image: docker.io/eclipse-mosquitto:${MOSQUITTO_VERSION:-2.0-openssl}
    container_name: netmaker-mq
    hostname: netmaker-mq
    restart: unless-stopped
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - netmaker_mq_data:/mosquitto/data
      - netmaker_mq_logs:/mosquitto/log
      - netmaker_certs:/mosquitto/certs # Assuming server certs are shared for MQTT TLS
    networks:
      - netmaker_network

  netmaker-ui:
    image: docker.io/gravitl/netmaker-ui:${NETMAKER_UI_VERSION:-latest}
    container_name: netmaker-ui
    hostname: netmaker-ui
    restart: unless-stopped
    environment:
      BACKEND_URL: https://api.${DOMAIN}:${SERVER_HTTPS_PORT} # External API URL
    networks:
      - netmaker_network
    depends_on:
      - netmaker-proxy # UI is typically accessed via the proxy

  netmaker-proxy:
    image: docker.io/nginx:${NGINX_VERSION:-latest}
    container_name: netmaker-proxy
    hostname: netmaker-proxy
    restart: unless-stopped
    ports:
      - "${SERVER_HTTPS_PORT:-8443}:${SERVER_HTTPS_PORT:-8443}" # Netmaker API via Nginx
      - "${DASHBOARD_HTTPS_PORT:-8080}:${DASHBOARD_HTTPS_PORT:-8080}" # Netmaker UI via Nginx
      # WireGuard ports need to be exposed directly by the netmaker-server or host
      # For Docker, if netmaker-server is not on host network, this needs careful thought.
      # For Podman, the pod exposes these. If using Docker Compose without a pod concept for WG,
      # it might be better for netmaker-server itself to publish these or use host network for it.
      # Let's assume for now netmaker-server handles its own WG port or is on host network if Docker.
      # The current scripts map 51821-51830 on the pod/host.
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl/selfsigned.key:/etc/nginx/ssl/selfsigned.key:ro
      - ./config/ssl/selfsigned.crt:/etc/nginx/ssl/selfsigned.crt:ro
    networks:
      - netmaker_network
    depends_on:
      - netmaker-server
      - netmaker-ui

  netmaker-xray:
    image: ghcr.io/xtls/xray-core:${XRAY_VERSION:-sha-59aa5e1-ls}
    container_name: netmaker-xray
    hostname: netmaker-xray
    restart: unless-stopped
    ports:
      - "${XRAY_PORT:-443}:${XRAY_PORT:-443}" # Xray public port
    volumes:
      - ./config/xray/config.toml:/etc/xray/config.toml:ro
      - ./config/xray/ssl:/etc/xray/ssl:ro # Mounts server.key and server.crt
    networks:
      - netmaker_network

volumes:
  netmaker_data:
  netmaker_certs:
  netmaker_mq_data:
  netmaker_mq_logs:

networks:
  netmaker_network:
    driver: bridge 